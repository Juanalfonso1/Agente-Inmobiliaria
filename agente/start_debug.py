"""
start_debug.py
---------------
Script de arranque de diagn√≥stico para Render.
Verifica variables de entorno cr√≠ticas, intenta importar la app
y muestra errores detallados en los logs.
"""

import os
import sys
import traceback
import time

# --- Variables de entorno cr√≠ticas ---
REQUIRED_ENV_VARS = ["OPENAI_API_KEY"]

def check_env_vars():
    print("üîç Verificando variables de entorno cr√≠ticas...")
    missing = []
    for var in REQUIRED_ENV_VARS:
        if not os.getenv(var):
            missing.append(var)
            print(f"‚ö†Ô∏è  Falta la variable de entorno: {var}")
        else:
            print(f"‚úÖ {var} configurada correctamente")
    if missing:
        print("‚ùå ERROR: Variables de entorno faltantes. "
              "Config√∫ralas en el dashboard de Render (Environment).")
        # No salimos a√∫n para permitir seguir con debug
    print("")

def try_import_app():
    print("üîç Intentando importar main.app ...")
    try:
        from main import app
        print("‚úÖ Importaci√≥n exitosa: main.app encontrado.")
        return True
    except Exception:
        print("‚ùå ERROR al importar main.app")
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üöÄ Iniciando start_debug.py (modo diagn√≥stico Render)\n")

    check_env_vars()
    success = try_import_app()

    if success:
        print("\nManteniendo el proceso vivo para inspecci√≥n de logs...")
        # Mantiene el contenedor activo, Render mostrar√° los logs
        try:
            while True:
                time.sleep(60)
        except KeyboardInterrupt:
            print("‚èπÔ∏è Proceso detenido manualmente")
    else:
        print("\n‚èπÔ∏è Finalizando con c√≥digo de error 1.")
        sys.exit(1)
